 ORG $0FD1	/* for now */
 PROCESSOR 6502
 include "iCadeOS.s"

/******************************************************************************/
/* INITIAL SETUP                                                              */
/******************************************************************************/

	/* Set up the sound synths */
	LDA #WAVE_SQUARE
	STA SOUND_VOICE1_WAVE
	LDA #WAVE_TRIANGLE
	STA SOUND_VOICE2_WAVE
	LDA #WAVE_SAWTOOTH
	STA SOUND_VOICE3_WAVE
	LDA #WAVE_SINE
	STA SOUND_VOICE4_WAVE
	LDA #WAVE_WHITE_NOISE
	STA SOUND_VOICE5_WAVE
	LDA #WAVE_BROWN_NOISE
	STA SOUND_VOICE6_WAVE
	LDA #WAVE_PINK_NOISE
	STA SOUND_VOICE7_WAVE
	LDA #NOTE_C3
	STA SOUND_VOICE1_NOTE
	STA SOUND_VOICE2_NOTE
	STA SOUND_VOICE3_NOTE
	STA SOUND_VOICE4_NOTE
	STA SOUND_VOICE5_NOTE
	STA SOUND_VOICE6_NOTE
	STA SOUND_VOICE7_NOTE
	STA SOUND_VOICE8_NOTE
	
	/* Copy my button characters into character RAM */
	LDA #<ONE
	LDY #>ONE
	JSR COPY_CHARS
	
	/* Copy my arrow characters into character RAM */
	LDA #<ARROWS
	LDY #>ARROWS
	JSR COPY_ARROWS
	
	/* Make the letters in the arrows a blue that's almost white */
	LDA #$80
	STA GRAPHICS_PALETTE_RAM + 9
	STA GRAPHICS_PALETTE_RAM + 10
	LDA #$FF
	STA GRAPHICS_PALETTE_RAM + 11
	
	/* Make the tip of the arrow a very basic blue (totally unnecessary since blue is a default color, just testing this functionality) */
	LDA #$00
	STA GRAPHICS_PALETTE_RAM + 15
	STA GRAPHICS_PALETTE_RAM + 16
	LDA #$FF
	STA GRAPHICS_PALETTE_RAM + 17
	
	/* Make the rest of the arrow (the background) a very dark blue */
	LDA #$00
	STA GRAPHICS_PALETTE_RAM + 36
	STA GRAPHICS_PALETTE_RAM + 37
	LDA #$30
	STA GRAPHICS_PALETTE_RAM + 38
	
	/* And set up the characters we want in screen RAM */
	JSR SETUP_SCREEN



/******************************************************************************/
/* OTHER STUFF                                                                */
/******************************************************************************/

/* Main loop */
LOOP:
	JSR READ_DPAD
	JSR READ_BUTTONS
	JMP LOOP


/* Draw the graphics on the screen, black-on-black */
SETUP_SCREEN:
	/* Button 1 */
	LDY #11
	STY GRAPHICS_SCREEN_RAM + 138
	INY
	STY GRAPHICS_SCREEN_RAM + 139
	INY
	STY GRAPHICS_SCREEN_RAM + 168
	INY
	STY GRAPHICS_SCREEN_RAM + 169
	
	/* Button 2 */
	INY
	STY GRAPHICS_SCREEN_RAM + 141
	INY
	STY GRAPHICS_SCREEN_RAM + 142
	INY
	STY GRAPHICS_SCREEN_RAM + 171
	INY
	STY GRAPHICS_SCREEN_RAM + 172
	
	/* Button 3 */
	INY
	STY GRAPHICS_SCREEN_RAM + 144
	INY
	STY GRAPHICS_SCREEN_RAM + 145
	INY
	STY GRAPHICS_SCREEN_RAM + 174
	INY
	STY GRAPHICS_SCREEN_RAM + 175
	
	/* Button 4 */
	INY
	STY GRAPHICS_SCREEN_RAM + 147
	INY
	STY GRAPHICS_SCREEN_RAM + 148
	INY
	STY GRAPHICS_SCREEN_RAM + 177
	INY
	STY GRAPHICS_SCREEN_RAM + 178
	
	/* Button 5 */
	INY
	STY GRAPHICS_SCREEN_RAM + 228
	INY
	STY GRAPHICS_SCREEN_RAM + 229
	INY
	STY GRAPHICS_SCREEN_RAM + 258
	INY
	STY GRAPHICS_SCREEN_RAM + 259
	
	/* Button 6 */
	INY
	STY GRAPHICS_SCREEN_RAM + 231
	INY
	STY GRAPHICS_SCREEN_RAM + 232
	INY
	STY GRAPHICS_SCREEN_RAM + 261
	INY
	STY GRAPHICS_SCREEN_RAM + 262
	
	/* Button 7 */
	INY
	STY GRAPHICS_SCREEN_RAM + 234
	INY
	STY GRAPHICS_SCREEN_RAM + 235
	INY
	STY GRAPHICS_SCREEN_RAM + 264
	INY
	STY GRAPHICS_SCREEN_RAM + 265
	
	/* Button 8 */
	INY
	STY GRAPHICS_SCREEN_RAM + 237
	INY
	STY GRAPHICS_SCREEN_RAM + 238
	INY
	STY GRAPHICS_SCREEN_RAM + 267
	INY
	STY GRAPHICS_SCREEN_RAM + 268

	/* Update the color RAM for the arrow keys, but not the screen chars */
	LDA #BG_DARK_BLUE + #FG_YELLOW
	STA GRAPHICS_EXTRA_COLORS
	LDA #BG_GREEN
	STA GRAPHICS_COLOR_RAM + 94
	STA GRAPHICS_COLOR_RAM + 95
	STA GRAPHICS_COLOR_RAM + 124
	STA GRAPHICS_COLOR_RAM + 125
	STA GRAPHICS_COLOR_RAM + 152
	STA GRAPHICS_COLOR_RAM + 153
	STA GRAPHICS_COLOR_RAM + 182
	STA GRAPHICS_COLOR_RAM + 183
	STA GRAPHICS_COLOR_RAM + 156
	STA GRAPHICS_COLOR_RAM + 157
	STA GRAPHICS_COLOR_RAM + 186
	STA GRAPHICS_COLOR_RAM + 187
	STA GRAPHICS_COLOR_RAM + 214
	STA GRAPHICS_COLOR_RAM + 215
	STA GRAPHICS_COLOR_RAM + 244
	STA GRAPHICS_COLOR_RAM + 245
	RTS

LEFT_UP:
	LDA #<WORD_LEFT
	LDY #>WORD_LEFT
	JSR TTS_SPEAK
	LDY #$0A
	STY GRAPHICS_SCREEN_RAM + 152
	STY GRAPHICS_SCREEN_RAM + 153
	STY GRAPHICS_SCREEN_RAM + 182
	STY GRAPHICS_SCREEN_RAM + 183
	JMP DONE_CHECKING_LEFT
LEFT_DOWN:
	LDY #175
	STY GRAPHICS_SCREEN_RAM + 152
	INY
	STY GRAPHICS_SCREEN_RAM + 153
	INY
	STY GRAPHICS_SCREEN_RAM + 182
	INY
	STY GRAPHICS_SCREEN_RAM + 183
	JMP DONE_CHECKING_LEFT

RIGHT_UP:
	LDA #<WORD_RIGHT
	LDY #>WORD_RIGHT
	JSR TTS_SPEAK
	LDY #$0A
	STY GRAPHICS_SCREEN_RAM + 156
	STY GRAPHICS_SCREEN_RAM + 157
	STY GRAPHICS_SCREEN_RAM + 186
	STY GRAPHICS_SCREEN_RAM + 187
	JMP DONE_CHECKING_RIGHT
RIGHT_DOWN:
	LDY #171
	STY GRAPHICS_SCREEN_RAM + 156
	INY
	STY GRAPHICS_SCREEN_RAM + 157
	INY
	STY GRAPHICS_SCREEN_RAM + 186
	INY
	STY GRAPHICS_SCREEN_RAM + 187
	JMP DONE_CHECKING_RIGHT


/* TO-DO: Rework this so it changes the color RAM instead of screen RAM */
READ_DPAD:
	LDA INPUT_DPAD
	AND #DPAD_LEFT
	BEQ LEFT_UP
	BNE LEFT_DOWN
DONE_CHECKING_LEFT:
	LDA INPUT_DPAD
	AND #DPAD_RIGHT
	BEQ RIGHT_UP
	BNE RIGHT_DOWN
DONE_CHECKING_RIGHT:
	LDA INPUT_DPAD
	AND #DPAD_UP
	BEQ UP_UP
	BNE UP_DOWN
DONE_CHECKING_UP:
	LDA INPUT_DPAD
	AND #DPAD_DOWN
	BEQ DOWN_UP
	BNE DOWN_DOWN
DONE_CHECKING_DOWN:
	RTS

UP_UP:
	LDA #<WORD_UP
	LDY #>WORD_UP
	JSR TTS_SPEAK
	LDY #$0A
	STY GRAPHICS_SCREEN_RAM + 94
	STY GRAPHICS_SCREEN_RAM + 95
	STY GRAPHICS_SCREEN_RAM + 124
	STY GRAPHICS_SCREEN_RAM + 125
	JMP DONE_CHECKING_UP
UP_DOWN:
	LDY #179
	STY GRAPHICS_SCREEN_RAM + 94
	INY
	STY GRAPHICS_SCREEN_RAM + 95
	INY
	STY GRAPHICS_SCREEN_RAM + 124
	INY
	STY GRAPHICS_SCREEN_RAM + 125
	JMP DONE_CHECKING_UP

DOWN_UP:
	LDA #<WORD_DOWN
	LDY #>WORD_DOWN
	JSR TTS_SPEAK
	LDY #$0A
	STY GRAPHICS_SCREEN_RAM + 214
	STY GRAPHICS_SCREEN_RAM + 215
	STY GRAPHICS_SCREEN_RAM + 244
	STY GRAPHICS_SCREEN_RAM + 245
	JMP DONE_CHECKING_DOWN
DOWN_DOWN:
	LDY #183
	STY GRAPHICS_SCREEN_RAM + 214
	INY
	STY GRAPHICS_SCREEN_RAM + 215
	INY
	STY GRAPHICS_SCREEN_RAM + 244
	INY
	STY GRAPHICS_SCREEN_RAM + 245
	JMP DONE_CHECKING_DOWN



/* Reads the joystick buttons and updates the screen accordingly */
READ_BUTTONS:
	LDA INPUT_BUTTONS
	AND #1
	BEQ ONE_UP
	BNE ONE_DOWN
DONE_READING_ONE:
	LDA INPUT_BUTTONS
	AND #2
	BEQ TWO_UP
	BNE TWO_DOWN
DONE_READING_TWO:
	LDA INPUT_BUTTONS
	AND #4
	BEQ THREE_UP
	BNE THREE_DOWN
DONE_READING_THREE:
	LDA INPUT_BUTTONS
	AND #8
	BEQ FOUR_UP
	BNE FOUR_DOWN
DONE_READING_FOUR:
	JSR CHECK_FIVE
DONE_READING_FIVE:
	JSR CHECK_SIX
DONE_READING_SIX:
	JSR CHECK_SEVEN
DONE_READING_SEVEN:
	JMP CHECK_EIGHT

ONE_DOWN:
	LDA #50
	STA SOUND_VOICE1_VOLUME
	LDA #BG_RED
	JSR UPDATE_ONE
	JMP DONE_READING_ONE
ONE_UP:
	LDA #00
	STA SOUND_VOICE1_VOLUME
	LDA #BG_BLACK
	JSR UPDATE_ONE
	JMP DONE_READING_ONE

TWO_DOWN:
	LDA #50
	STA SOUND_VOICE2_VOLUME
	LDA #BG_RED
	JSR UPDATE_TWO
	JMP DONE_READING_TWO
TWO_UP:
	LDA #0
	STA SOUND_VOICE2_VOLUME
	LDA #FG_BLACK
	JSR UPDATE_TWO
	JMP DONE_READING_TWO

THREE_DOWN:
	LDA #50
	STA SOUND_VOICE3_VOLUME
	LDA #BG_RED
	JSR UPDATE_THREE
	JMP DONE_READING_THREE
THREE_UP:
	LDA #0
	STA SOUND_VOICE3_VOLUME
	LDA #FG_BLACK
	JSR UPDATE_THREE
	JMP DONE_READING_THREE

FOUR_DOWN:
	LDA #50
	STA SOUND_VOICE4_VOLUME
	LDA #BG_RED
	JSR UPDATE_FOUR
	JMP DONE_READING_FOUR
FOUR_UP:
	LDA #0
	STA SOUND_VOICE4_VOLUME
	LDA #FG_BLACK
	JSR UPDATE_FOUR
	JMP DONE_READING_FOUR

CHECK_FIVE:
	LDA INPUT_BUTTONS
	AND #16
	BEQ FIVE_UP
	BNE FIVE_DOWN
	RTS

FIVE_DOWN:
	LDA #50
	STA SOUND_VOICE5_VOLUME
	LDA #BG_RED
	JSR UPDATE_FIVE
	JMP DONE_READING_FIVE
FIVE_UP:
	LDA #0
	STA SOUND_VOICE5_VOLUME
	LDA #FG_BLACK
	JSR UPDATE_FIVE
	JMP DONE_READING_FIVE

CHECK_SIX:
	LDA INPUT_BUTTONS
	AND #32
	BEQ SIX_UP
	BNE SIX_DOWN
	RTS

SIX_DOWN:
	LDA #50
	STA SOUND_VOICE6_VOLUME
	LDA #BG_RED
	JSR UPDATE_SIX
	JMP DONE_READING_SIX
SIX_UP:
	LDA #0
	STA SOUND_VOICE6_VOLUME
	LDA #FG_BLACK
	JSR UPDATE_SIX
	JMP DONE_READING_SIX

CHECK_SEVEN:
	LDA INPUT_BUTTONS
	AND #64
	BEQ SEVEN_UP
	BNE SEVEN_DOWN
	RTS

SEVEN_DOWN:
	LDA #50
	STA SOUND_VOICE7_VOLUME
	LDA #BG_RED
	JSR UPDATE_SEVEN
	JMP DONE_READING_SEVEN
SEVEN_UP:
	LDA #0
	STA SOUND_VOICE7_VOLUME
	LDA #FG_BLACK
	JSR UPDATE_SEVEN
	JMP DONE_READING_SEVEN

/**
 * Since the old way (like in World 1-1) is out of range for BNE/BEQ,
 * I was getting branch out of range errors
 */
CHECK_EIGHT:
	LDA INPUT_BUTTONS
	AND #128
	BEQ EIGHT_UP
	BNE EIGHT_DOWN
	RTS

EIGHT_DOWN:
	LDA #50
	STA SOUND_VOICE8_VOLUME
	LDA #BG_RED
	JSR UPDATE_EIGHT
	RTS
EIGHT_UP:
	LDA #0
	STA SOUND_VOICE8_VOLUME
	LDA #FG_BLACK
	JSR UPDATE_EIGHT
	RTS


UPDATE_ONE:
	STA GRAPHICS_COLOR_RAM + 138
	STA GRAPHICS_COLOR_RAM + 139
	STA GRAPHICS_COLOR_RAM + 168
	STA GRAPHICS_COLOR_RAM + 169
	RTS
UPDATE_TWO:
	STA GRAPHICS_COLOR_RAM + 141
	STA GRAPHICS_COLOR_RAM + 142
	STA GRAPHICS_COLOR_RAM + 171
	STA GRAPHICS_COLOR_RAM + 172
	RTS
UPDATE_THREE:
	STA GRAPHICS_COLOR_RAM + 144
	STA GRAPHICS_COLOR_RAM + 145
	STA GRAPHICS_COLOR_RAM + 174
	STA GRAPHICS_COLOR_RAM + 175
	RTS
UPDATE_FOUR:
	STA GRAPHICS_COLOR_RAM + 147
	STA GRAPHICS_COLOR_RAM + 148
	STA GRAPHICS_COLOR_RAM + 177
	STA GRAPHICS_COLOR_RAM + 178
	RTS
UPDATE_FIVE:
	STA GRAPHICS_COLOR_RAM + 228
	STA GRAPHICS_COLOR_RAM + 229
	STA GRAPHICS_COLOR_RAM + 258
	STA GRAPHICS_COLOR_RAM + 259
	RTS
UPDATE_SIX:
	STA GRAPHICS_COLOR_RAM + 231
	STA GRAPHICS_COLOR_RAM + 232
	STA GRAPHICS_COLOR_RAM + 261
	STA GRAPHICS_COLOR_RAM + 262
	RTS
UPDATE_SEVEN:
	STA GRAPHICS_COLOR_RAM + 234
	STA GRAPHICS_COLOR_RAM + 235
	STA GRAPHICS_COLOR_RAM + 264
	STA GRAPHICS_COLOR_RAM + 265
	RTS
UPDATE_EIGHT:
	STA GRAPHICS_COLOR_RAM + 237
	STA GRAPHICS_COLOR_RAM + 238
	STA GRAPHICS_COLOR_RAM + 267
	STA GRAPHICS_COLOR_RAM + 268
	RTS


TTS_SPEAK:
	STA TTS_BUFFER_START
	STY TTS_BUFFER_START + 1
	LDA #TTS_START_SPEAKING
	STA TTS_STATUS
TTS_WAIT_TILL_DONE:
	LDA TTS_STATUS
	BEQ TTS_WAIT_TILL_DONE
	RTS

COPY_CHARS:
 STA $00
 STY $01		/* So $0000 now points to the string to be written */
 LDY #$00
COPY_CHARS_CONTINUE:
 LDA ($00),Y
 STA GRAPHICS_CHARACTER_RAM+88,Y
 INY
 BEQ COPY_CHARS_DONE		/* If A == 77, then return */
 JMP COPY_CHARS_CONTINUE	/* else, print the character and continue the loop */
COPY_CHARS_DONE:
 RTS

COPY_ARROWS:
 STA $00
 STY $01		/* So $0000 now points to the string to be written */
 LDY #$00
COPY_ARROWS_CONTINUE:
 LDA ($00),Y
 STA GRAPHICS_CHARACTER_RAM+344,Y
 INY
 BEQ COPY_ARROWS_DONE		/* If A == 77, then return */
 JMP COPY_ARROWS_CONTINUE	/* else, print the character and continue the loop */
COPY_ARROWS_DONE:
 RTS






/*********************************************************************************************************************/
/* GRAPHICS CHARACTER REDEFINITION                                                                                   */
/*********************************************************************************************************************/

/* 1 */
ONE:
	BYTE 15,31,63,127,254,254,252,254
	BYTE 240,248,252,254,127,127,127,127
	BYTE 254,254,254,248,127,63,31,15
	BYTE 127,127,127,31,254,252,248,240
/* 2 */
	BYTE 15,31,63,127,252,249,255,254
	BYTE 240,248,252,254,63,159,159,63
	BYTE 253,251,251,248,127,63,31,15
	BYTE 255,255,255,31,254,252,248,240
/* 3 */
	BYTE 15,31,63,127,252,251,255,255
	BYTE 240,248,252,254,63,159,159,63
	BYTE 252,255,251,252,127,63,31,15
	BYTE 63,159,159,63,254,252,248,240
/* 4 */
	BYTE 15,31,63,127,255,255,254,253
	BYTE 240,248,252,254,191,63,191,191
	BYTE 248,255,255,255,127,63,31,15
	BYTE 31,191,191,255,254,252,248,240
/* 5 */
	BYTE 15,31,63,127,248,251,248,255
	BYTE 240,248,252,254,31,255,127,191
	BYTE 255,251,252,255,127,63,31,15
	BYTE 223,191,127,255,254,252,248,240
/* 6 */
	BYTE 15,31,63,127,254,253,251,248
	BYTE 240,248,252,254,63,255,255,63
	BYTE 251,251,252,255,127,63,31,15
	BYTE 223,223,63,255,254,252,248,240
/* 7 */
	BYTE 15,31,63,127,248,251,255,255
	BYTE 240,248,252,254,31,223,191,127
	BYTE 254,254,254,255,127,63,31,15
	BYTE 255,255,255,255,254,252,248,240
/* 8 */
	BYTE 15,31,63,127,252,251,251,252
	BYTE 240,248,252,254,63,223,223,63
	BYTE 251,251,252,255,127,63,31,15
	BYTE 223,223,63,255,254,252,248,240
ARROWS:
/* Rightt */
	BYTE 0,0,0,0,255,215,221,221
	BYTE 128,128,160,224,232,248,250,254
	BYTE 215,221,221,255,0,0,0,0
	BYTE 254,250,248,232,224,160,128,128
/* Left */
	BYTE 2,2,10,11,43,47,175,191
	BYTE 0,0,0,0,255,127,127,127
	BYTE 191,175,47,43,11,10,2,2
	BYTE 127,127,87,255,0,0,0,0
/* Up */
	BYTE 2,2,10,11,43,47,175,191
	BYTE 128,128,160,224,232,248,250,254
	BYTE 63,55,55,55,55,55,61,63
	BYTE 252,220,220,220,220,220,124,252
/* Down */
	BYTE 63,53,55,55,55,55,53,63
	BYTE 252,124,92,220,220,92,124,252
	BYTE 191,191,175,47,43,11,10,2
	BYTE 254,254,250,248,232,224,160,128


/******************************************************************************/
/* TEXT-TO-SPEECH DATA                                                        */
/******************************************************************************/

WORD_UP:
	BYTE "up", 0
WORD_DOWN:
	BYTE "down", 0
WORD_LEFT:
	BYTE "left", 0
WORD_RIGHT:
	BYTE "right", 0
