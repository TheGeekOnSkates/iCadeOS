 ORG $0FD0	/* for now */
 PROCESSOR 6502
 include "iCadeOS.s"

	JSR SETUP_CHARS	/* LEFT OFF HERE (doesn't copy arrows, also seems to freeze) */
	JSR SETUP_SCREEN
LOOP:
	JSR READ_DPAD
	JSR READ_BUTTONS
	JMP LOOP

/* Redefines the characters to use the graphics I want */
SETUP_CHARS:
	LDA #<ONE
	LDY #>ONE
	JSR COPY_CHARS	/* Never gets to the next line... some kind of infinite loop? */
	RTS

/* Draw the graphics on the screen, black-on-black */
SETUP_SCREEN:
	LDY #11
	STY GRAPHICS_SCREEN_RAM + 138
	INY
	STY GRAPHICS_SCREEN_RAM + 139
	INY
	STY GRAPHICS_SCREEN_RAM + 168
	INY
	STY GRAPHICS_SCREEN_RAM + 169
	INY
	STY GRAPHICS_SCREEN_RAM + 141
	INY
	STY GRAPHICS_SCREEN_RAM + 142
	INY
	STY GRAPHICS_SCREEN_RAM + 171
	INY
	STY GRAPHICS_SCREEN_RAM + 172
	INY
	STY GRAPHICS_SCREEN_RAM + 144
	INY
	STY GRAPHICS_SCREEN_RAM + 145
	INY
	STY GRAPHICS_SCREEN_RAM + 174
	INY
	STY GRAPHICS_SCREEN_RAM + 175
	INY
	STY GRAPHICS_SCREEN_RAM + 147
	INY
	STY GRAPHICS_SCREEN_RAM + 148
	INY
	STY GRAPHICS_SCREEN_RAM + 177
	INY
	STY GRAPHICS_SCREEN_RAM + 178
	INY
	STY GRAPHICS_SCREEN_RAM + 228
	INY
	STY GRAPHICS_SCREEN_RAM + 229
	INY
	STY GRAPHICS_SCREEN_RAM + 258
	INY
	STY GRAPHICS_SCREEN_RAM + 259
	INY
	STY GRAPHICS_SCREEN_RAM + 231
	INY
	STY GRAPHICS_SCREEN_RAM + 232
	INY
	STY GRAPHICS_SCREEN_RAM + 261
	INY
	STY GRAPHICS_SCREEN_RAM + 262
	INY
	STY GRAPHICS_SCREEN_RAM + 234
	INY
	STY GRAPHICS_SCREEN_RAM + 235
	INY
	STY GRAPHICS_SCREEN_RAM + 264
	INY
	STY GRAPHICS_SCREEN_RAM + 265
	INY
	STY GRAPHICS_SCREEN_RAM + 237
	INY
	STY GRAPHICS_SCREEN_RAM + 238
	INY
	STY GRAPHICS_SCREEN_RAM + 267
	INY
	STY GRAPHICS_SCREEN_RAM + 268
	/* Left off here */
	RTS

/* TO-DO: Rework this so it changes the color RAM instead of screen RAM */
READ_DPAD:
	LDA INPUT_DPAD
	STA GRAPHICS_SCREEN_RAM
	RTS

/* TO-DO: Rework this so it changes the color RAM instead of screen RAM */
READ_BUTTONS:
	LDA INPUT_BUTTONS
	AND #1
	BEQ ONE_UP
	BNE ONE_DOWN
DONE_READING_ONE:
	LDA INPUT_BUTTONS
	AND #2
	BEQ TWO_UP
	BNE TWO_DOWN
DONE_READING_TWO:
	LDA INPUT_BUTTONS
	AND #4
	BEQ THREE_UP
	BNE THREE_DOWN
DONE_READING_THREE:
	LDA INPUT_BUTTONS
	AND #8
	BEQ FOUR_UP
	BNE FOUR_DOWN
DONE_READING_FOUR:
	LDA INPUT_BUTTONS
	AND #16
	BEQ FIVE_UP
	BNE FIVE_DOWN
DONE_READING_FIVE:
	LDA INPUT_BUTTONS
	AND #32
	BEQ SIX_UP
	BNE SIX_DOWN
DONE_READING_SIX:
	LDA INPUT_BUTTONS
	AND #64
	BEQ SEVEN_UP
	BNE SEVEN_DOWN
DONE_READING_SEVEN:
	LDA INPUT_BUTTONS
	AND #128
	BEQ EIGHT_UP
	BNE EIGHT_DOWN
DONE_READING_EIGHT:
	RTS

ONE_DOWN:
	LDA #BG_RED
	JSR UPDATE_ONE
	JMP DONE_READING_ONE
ONE_UP:
	LDA #BG_BLACK
	JSR UPDATE_ONE
	JMP DONE_READING_ONE

TWO_DOWN:
	LDA #BG_RED
	JSR UPDATE_TWO
	JMP DONE_READING_TWO
TWO_UP:
	LDA #FG_BLACK
	JSR UPDATE_TWO
	JMP DONE_READING_TWO

THREE_DOWN:
	LDA #BG_RED
	JSR UPDATE_THREE
	JMP DONE_READING_THREE
THREE_UP:
	LDA #FG_BLACK
	JSR UPDATE_THREE
	JMP DONE_READING_THREE

FOUR_DOWN:
	LDA #BG_RED
	JSR UPDATE_FOUR
	JMP DONE_READING_FOUR
FOUR_UP:
	LDA #FG_BLACK
	JSR UPDATE_FOUR
	JMP DONE_READING_FOUR

FIVE_DOWN:
	LDA #BG_RED
	JSR UPDATE_FIVE
	JMP DONE_READING_FIVE
FIVE_UP:
	LDA #FG_BLACK
	JSR UPDATE_FIVE
	JMP DONE_READING_FIVE

SIX_DOWN:
	LDA #BG_RED
	JSR UPDATE_SIX
	JMP DONE_READING_SIX
SIX_UP:
	LDA #FG_BLACK
	JSR UPDATE_SIX
	JMP DONE_READING_SIX

SEVEN_DOWN:
	LDA #BG_RED
	JSR UPDATE_SEVEN
	JMP DONE_READING_SEVEN
SEVEN_UP:
	LDA #FG_BLACK
	JSR UPDATE_SEVEN
	JMP DONE_READING_SEVEN

EIGHT_DOWN:
	LDA #BG_RED
	JSR UPDATE_EIGHT
	JMP DONE_READING_EIGHT
EIGHT_UP:
	LDA #FG_BLACK
	JSR UPDATE_EIGHT
	JMP DONE_READING_EIGHT


UPDATE_ONE:
	STA GRAPHICS_COLOR_RAM + 138
	STA GRAPHICS_COLOR_RAM + 139
	STA GRAPHICS_COLOR_RAM + 168
	STA GRAPHICS_COLOR_RAM + 169
	RTS
UPDATE_TWO:
	STA GRAPHICS_COLOR_RAM + 141
	STA GRAPHICS_COLOR_RAM + 142
	STA GRAPHICS_COLOR_RAM + 171
	STA GRAPHICS_COLOR_RAM + 172
	RTS
UPDATE_THREE:
	STA GRAPHICS_COLOR_RAM + 144
	STA GRAPHICS_COLOR_RAM + 145
	STA GRAPHICS_COLOR_RAM + 174
	STA GRAPHICS_COLOR_RAM + 175
	RTS
UPDATE_FOUR:
	STA GRAPHICS_COLOR_RAM + 147
	STA GRAPHICS_COLOR_RAM + 148
	STA GRAPHICS_COLOR_RAM + 177
	STA GRAPHICS_COLOR_RAM + 178
	RTS
UPDATE_FIVE:
	STA GRAPHICS_COLOR_RAM + 228
	STA GRAPHICS_COLOR_RAM + 229
	STA GRAPHICS_COLOR_RAM + 258
	STA GRAPHICS_COLOR_RAM + 259
	RTS
UPDATE_SIX:
	STA GRAPHICS_COLOR_RAM + 231
	STA GRAPHICS_COLOR_RAM + 232
	STA GRAPHICS_COLOR_RAM + 261
	STA GRAPHICS_COLOR_RAM + 262
	RTS
UPDATE_SEVEN:
	STA GRAPHICS_COLOR_RAM + 234
	STA GRAPHICS_COLOR_RAM + 235
	STA GRAPHICS_COLOR_RAM + 264
	STA GRAPHICS_COLOR_RAM + 265
	RTS
UPDATE_EIGHT:
	STA GRAPHICS_COLOR_RAM + 237
	STA GRAPHICS_COLOR_RAM + 238
	STA GRAPHICS_COLOR_RAM + 267
	STA GRAPHICS_COLOR_RAM + 268
	RTS



/*
Random thought: This is something I expect I'll be using A LOT;
I hadn'e really meant for this sytem to have a kernel, but if I
do, maybe I should think about including this function.
*/
COPY_CHARS:
 STA $00
 STY $01		/* So $0000 now points to the string to be written */
 LDY #$00
COPY_CHARS_CONTINUE:
 LDA ($00),Y
 STA GRAPHICS_CHARACTER_RAM+88,Y
 INY
 BEQ COPY_CHARS_DONE		/* If A == 77, then return */
 JMP COPY_CHARS_CONTINUE	/* else, print the character and continue the loop */
COPY_CHARS_DONE:
 RTS






/*********************************************************************************************************************/
/* GRAPHICS CHARACTER REDEFINITION                                                                                   */
/*********************************************************************************************************************/

/* 1 */
ONE:
	BYTE 15,31,63,127,254,254,252,254
	BYTE 240,248,252,254,127,127,127,127
	BYTE 254,254,254,248,127,63,31,15
	BYTE 127,127,127,31,254,252,248,240
/* 2 */
	BYTE 15,31,63,127,252,249,255,254
	BYTE 240,248,252,254,63,159,159,63
	BYTE 253,251,251,248,127,63,31,15
	BYTE 255,255,255,31,254,252,248,240
/* 3 */
	BYTE 15,31,63,127,252,251,255,255
	BYTE 240,248,252,254,63,159,159,63
	BYTE 252,255,251,252,127,63,31,15
	BYTE 63,159,159,63,254,252,248,240
/* 4 */
	BYTE 15,31,63,127,255,255,254,253
	BYTE 240,248,252,254,191,63,191,191
	BYTE 248,255,255,255,127,63,31,15
	BYTE 31,191,191,255,254,252,248,240
/* 5 */
	BYTE 15,31,63,127,248,251,248,255
	BYTE 240,248,252,254,31,255,127,191
	BYTE 255,251,252,255,127,63,31,15
	BYTE 223,191,127,255,254,252,248,240
/* 6 */
	BYTE 15,31,63,127,254,253,251,248
	BYTE 240,248,252,254,63,255,255,63
	BYTE 251,251,252,255,127,63,31,15
	BYTE 223,223,63,255,254,252,248,240
/* 7 */
	BYTE 15,31,63,127,248,251,255,255
	BYTE 240,248,252,254,31,223,191,127
	BYTE 254,254,254,255,127,63,31,15
	BYTE 255,255,255,255,254,252,248,240
/* 8 */
	BYTE 15,31,63,127,252,251,251,252
	BYTE 240,248,252,254,63,223,223,63
	BYTE 251,251,252,255,127,63,31,15
	BYTE 223,223,63,255,254,252,248,240
ARROWS:
/* An arrow pointing left */
	BYTE 1,3,6,12,24,48,96,192
	BYTE 192,192,192,255,255,3,3,3
	BYTE 192,96,48,24,12,6,3,1
	BYTE 3,3,3,255,255,192,192,192
/* An arrow pointing rightt */
	BYTE 3,3,3,255,255,192,192,192
	BYTE 128,192,96,48,24,12,6,3
	BYTE 192,192,192,255,255,3,3,3
	BYTE 3,6,12,24,48,96,192,128
/* Top part of an arrow pointing down (for the pointy parts I can reuse bits from the left/right arrows) */
	BYTE 31,31,24,24,24,24,248,248
	BYTE 248,248,24,24,24,24,31,31
/* Bottom part of an arrow pointing up */
	BYTE 248,248,24,24,24,24,31,31
	BYTE 31,31,24,24,24,24,248,248
